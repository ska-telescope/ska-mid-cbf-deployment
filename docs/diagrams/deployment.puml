@startuml deployment
!pragma teoz true

title Mid.CBF Deployment

!$gitlabBackground = "#orange"
!$skaoClusterBackground = "#lightblue"
!$fhsBittwareServersBackground = "#lightyellow"
!$fhsWorkerNodesBackground = "#lightgreen"

actor maintainer as maintainer

box "SKAO Gitlab" $gitlabBackground
participant "ska-mid-cbf-deployment" as skaMidCbfDeployment
participant "deployment-pipeline" as deploymentPipeline
end box

box "CAR"
participant "CAR" as car
end box

box "SKAO Cluster" $skaoClusterBackground
participant "SKA Control Plane" as skaCluster
participant "Bitstream-Volume" as bitstreamVolume
participant "LMC" as lmc
participant "MCS" as mcs
end box

box "FHS Bittware Servers" $fhsBittwareServersBackground
participant "FHS-BMCs" as fhsBmcs
participant "FHS-Servers" as fhsServers
participant "FHS-Worker-Nodes" as fhsWorkerNodes
participant "FPGAs" as fpgas
box "FHS Worker Nodes" $fhsWorkerNodesBackground
participant "FHS-Server Monitor" as fhsServerMonitor
participant "FPGA Card Control & Monitor" as fpgaCardCtrlMonitor
participant "FHS Controller" as fhsController
participant "bitstream-download-job" as bitstreamDownloadJob
participant "FHS-Device-Servers (VCC/FSP)" as fhsDeviceServers
participant "Emulators" as emulators
participant "Injector" as injector
participant "RabbitMQ" as rabbitMq

end box
end box



maintainer->skaMidCbfDeployment: runs command to start deployment pipeline
deploymentPipeline->car:requests mid.cbf helm charts
car-->deploymentPipeline: mid.cbf helm charts
deploymentPipeline->skaCluster: Deploy MCS from umbrella chart
deploymentPipeline->skaCluster: Provision Volume for bitstream storage
skaCluster->bitstreamVolume: provision volume
skaCluster->mcs: pod created and initialized
lmc->mcs: send On() Command
activate mcs
note over mcs
Until On is recieved from MCS, the FHS servers are all in a low power state
end note
mcs->fhsBmcs: send On() command to FHS BMCs
fhsBmcs->fhsServers: start up FHS servers
activate fhsServers
loop Until On/Ready
mcs->fhsBmcs: get server status
fhsBmcs-->mcs: server status
end
group Worker Node Configuration
note over fhsServers
Upon start up , fhs server automatically configures the FHS Worker node with
a taint / toleration based on its physical connection (VCC/FSP) using a script.
It is registered with the ska control plane then is uncordoned and becomes available 
for scheduling
end note
activate fhsWorkerNodes
fhsWorkerNodes->skaCluster: Register Node With SKA Control Plane
skaCluster->fhsWorkerNodes: ready for scheduling
end
deploymentPipeline->fhsWorkerNodes: Deploy FHS Device Servers from umbrella chart
deploymentPipeline->fhsServerMonitor: Deploy FHS Server Monitor from umbrella chart
deploymentPipeline->fpgaCardCtrlMonitor: Deploy FHS Server Monitor from umbrella chart
deploymentPipeline->fhsController: Deploy FHS Controller from umbrella chart


activate fhsServerMonitor
fhsWorkerNodes->fhsServerMonitor: FHS Server Monitor Pod created

activate fpgaCardCtrlMonitor
fhsWorkerNodes->fpgaCardCtrlMonitor: FPGA Ctrl Monitor Pod created
fpgaCardCtrlMonitor->bitstreamVolume: mount volume


activate fhsDeviceServers
fhsWorkerNodes->fhsDeviceServers: Device Server Pods Created
fhsDeviceServers->bitstreamVolume: Mount bitstream volume

loop Bitstream Download Job Completion
fhsServerMonitor->fhsServerMonitor
fpgaCardCtrlMonitor->fpgaCardCtrlMonitor
fhsDeviceServers->fhsDeviceServers
end

fhsWorkerNodes->bitstreamDownloadJob: start bitstream download job
activate bitstreamDownloadJob
bitstreamDownloadJob->bitstreamVolume: mount volume
bitstreamDownloadJob->car: Download required bitstreams
car-->bitstreamVolume: Downloaded bitstreams to volume
deactivate bitstreamDownloadJob

fpgaCardCtrlMonitor->fhsServers: mount fpga device to load bitstream to
note over fpgaCardCtrlMonitor
The bitstreams version for use is found in the helm chart under the vcc / fsp unit
Engineering mode versions can be downloaded and installed as well
end note
fpgaCardCtrlMonitor->fpgas: load the bistreams to the fpga bitstream parition
fpgaCardCtrlMonitor->fpgas: install bitstream on server

fhsWorkerNodes->fhsServerMonitor: Start FHS-Monitor Device Servers
loop FHS-Monitor
fhsServerMonitor->fhsBmcs: get server health
fhsBmcs-->fhsServerMonitor: server health stats
end

alt emulator_mode = false
fhsDeviceServers->bitstreamVolume: load FW bitstream API from bitstream drivers folder
fhsDeviceServers->fpgas: Bind to FPGA device in container
fhsDeviceServers->fpgas: Initialize device communications
else emulator_mode = true
fhsWorkerNodes->emulators: Emulator Pods Created
activate emulators
fhsWorkerNodes->injector: Injector Pod Created
activate injector
fhsWorkerNodes->rabbitMq: RabbitMQ Pod Created
activate rabbitMq
emulators->rabbitMq: Emulators connect to RabbitMQ for message processing
loop message processing
rabbitMq-->emulators: Messages
end
fhsDeviceServers->bitstreamVolume: load Emulator bitstream API from bitstream emulators folder
end

@enduml